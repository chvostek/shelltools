#!/usr/bin/env bash

countdown_usage() {
	cat <<EOusage | mdformat

**NAME**
	${0##*/} - sleep with noise

**SYNOPSIS**
	${0##*/} -h
	${0##*/} [**-iq**] _s_

**DESCRIPTION**
	Counts down from the given number, 1 second at a time. If **-q** is
	specified, do so quietly, which is functionally like _sleep_.
	If **-i** (interactive) is specified, then the countdown may be cut
	short with user input producing no error. _s_ is the number of
	seconds to count down, an integer.

	In interactive (**-i**) mode, the following commands work:

	**r** or **+**	RewinR ${COUNTDOWN_JUMP:-10} seconds
	**a** or **-**	Advance ${COUNTDOWN_JUMP:-10} seconds
	**q**	Quit (return success)
	**x**	Quit (return fail)
	**p**	Pause (any key to continue)

**ENVIRONMENT**
	Some variables affect the script's behaviour.

	**COUNTDOWN_JUMP**
		the interval added/removed with 
EOusage
}

mdformat() {
	local md so us mr me
	if [ -t 1 ]; then
		md=$(tput md)	# bold
		so=$(tput so)	# standout (inverse?)
		us=$(tput us)	# underline
		mr=$(tput mr)	# reverse
		me=$(tput me)	# exit attributes
	fi
	sed -E \
		-e "s/\*\*([^*]+)\*\*/$md\1$me/g" \
		-e "s/\*([^*]+)\*/$us\1$me/g" \
		-e "s/_([^_]+)_/$us\1$me/g" \
		-e "s/^#+ *(.+)/$so\1$me/g" \
		-e "s/#([^#]+)#/$mr\1$me/g"
}

countdown_opts() {
	declare -g -i countdown_s
	declare -g countdown_opti countdown_optq
	declare -g countdown_debug countdown_time
	countdown_opti=false
	countdown_optq=false
	countdown_debug=false
	countdown_time=""
	while getopts diqh opt; do
		case "$opt" in
			h) countdown_usage; exit 0 ;;
			q) countdown_optq=true ;;
			i) countdown_opti=true ;;
			d) countdown_debug=true; countdown_time=time ;;
			j) COUNTDOWN_JUMP="$OPTARG" ;;
			*) countdown_usage; exit 64 ;;
		esac
	done
	shift $((OPTIND - 1))
	countdown_s="$1"
	$countdown_debug && echo "Debug on"
}

countdown() {
	countdown_opts "$@"
	local count
	local what
	local start
	local pause_start
	local el
	printf -v start '%(%s)T'
	el=$(tput el)
	count="$countdown_s"
	while [[ $count -ge 0 ]]; do
		case "$what" in
			r|+|=) (( count += ${COUNTDOWN_JUMP:-10} ))  ;;
			a|-|_) (( count -= ${COUNTDOWN_JUMP:-10} ))  ;;
			q) break ;;
			x) echo; exit 1 ;;
			p)
				printf "\r%d ... ${el}" "$count"
				printf -v pause_start '%(%s)T'
				read -n 1 -p "PAUSED - press any key to continue"
				printf -v pause_time '%(%s)T'
				(( pause_time -= pause_start ))
				(( start += pause_time ))
				;;
		esac

		$countdown_optq || printf "\r%d ... ${el}" "$count"

		if $countdown_opti; then
			$countdown_optq || printf "Rewind/Advance/Quit/Exit/Pause ... " >&2
			$countdown_time read -t 1 -n 1 what
			if [[ $(date '+%s') -gt $(($start + $countdown_s)) ]]; then
				$countdown_optq || printf "\r%d ... TIME${el}" "$count"
				break
			fi
		else
			sleep 1
		fi
		(( count-- ))
	done

	$countdown_optq || printf "\r%d ... Done!${ek}\n" "$i"
}

# only execute if we're called directly
case "$-" in
	*i*) : ;;
	*) countdown "$@" ;;
esac

